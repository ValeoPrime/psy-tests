{"version":3,"sources":["components/UI/button/button.css","components/Navigation/Drawer/Drawer.css","components/ActiveQuestionnaire/ActiveQuestionnaire.css","components/Navigation/MenuToggle/MenuToggle.css","containers/MainQuiz.css","components/ActiveQuestionnaire/AnswersList/AnswerItem/AnswerItem.css","components/UI/Loader/Loader.css","components/UI/GuestScreen/GuestScreen.css","containers/Auth/Auth.css","components/UI/Input/Input.css","hoc/Layout/Layout.css","components/UI/BackDrop/BackDrop.css","components/ActiveQuestionnaire/AnswersList/AnswersList.css","components/finishedQuestionnaire/FinishedQuestionnaire.css","components/UI/GuestScreen/ItemsList/itemsList.css","components/UI/GuestScreen/ItemsList/ListItem/ListItem.css","containers/QuizeCreator/QuizCreator.css","components/UI/Select/Select.css","containers/QuizeCreator/QuestionareTitle/QuestionareTitle.css","App.css","components/Navigation/MenuToggle/MenuToggle.js","components/UI/BackDrop/BackDrop.js","components/Navigation/Drawer/Drawer.js","hoc/Layout/Layout.js","components/ActiveQuestionnaire/AnswersList/AnswerItem/AnswerItem.js","components/ActiveQuestionnaire/AnswersList/AnswersList.js","components/ActiveQuestionnaire/ActiveQuestionnaire.js","components/UI/button/button.js","components/finishedQuestionnaire/FinishedQuestionnaire.js","components/UI/Loader/Loader.js","store/actions/guestScreenActions.js","store/actions/actionTypes.js","containers/MainQuiz.js","components/UI/GuestScreen/ItemsList/ListItem/ListItem.js","components/UI/GuestScreen/ItemsList/ItemsList.js","components/UI/GuestScreen/GuestScreen.js","components/UI/Input/Input.js","store/actions/authActions.js","containers/Auth/Auth.js","components/UI/Select/Select.js","FormFrames/formFrameworks.js","containers/QuizeCreator/QuestionareTitle/QuestionareTitle.js","containers/QuizeCreator/QuizCreator.js","store/actions/createTestActions.js","components/Logout/Logout.js","App.js","serviceWorker.js","store/reducers/guestScreenReducer.js","store/reducers/AuthReducer.js","store/reducers/rootReducer.js","index.js"],"names":["module","exports","MenuToggle","props","cls","styles","isOpen","push","open","className","join","onClick","onToggle","BackDrop","Backdrop","Drawer","links","map","link","index","key","to","exact","activeClassName","active","onClose","label","this","close","isAuthenticated","Fragment","renderLinks","Component","Layout","state","menu","ToogleMenu","setState","menuClose","color","children","connect","auth","token","AnswerItem","answerState","answerClick","answer","id","text","AnswersList","answers","ActiveQuestionnaire","classes","Question","QuestionNum","textQuestion","small","totalNumQuestions","Button","button","type","FinishedQuestionnaire","rightAnswers","Object","keys","results","reduce","accum","questions","question","length","onRetry","onRepeat","Loader","console","log","lds","fetchAllQuestionnaireTitles","allQuestionnaireTitles","Answer","result","isQuestionnaireFinished","activeQuestion","QuestionnaireFinished","nextQuestion","number","fetchActiveTestTitleQuestions","title","questionnaireTitle","MainQuiz","backToList","history","repeatHandler","fetchActiveTest","testId","location","pathname","split","MainQuizWrapper","questionsLoad","isFinished","retryHandler","allTests","dispatch","a","Title","axios","get","data","forEach","item","questionareTitle","error","answerId","getState","rightAnswerId","timeout","window","setTimeout","clearTimeout","ListItem","localStorage","getItem","url","ItemsList","itemsList","allTitles","GuestScreen","redirect","guestScreenOff","fetchAllTestsTitles","clases","success","guestScreen","testID","TESTId","Div","response","t","isInvalid","valid","touched","shouldValidate","Input","inputType","htmlFor","Math","random","invalid","value","onChange","errorMessage","authSuccess","idToken","autoLogout","time","logout","removeItem","Auth","isFormValid","formControls","email","validations","required","password","minLength","submitHandler","event","preventDefault","loginHandler","registerHandler","onChangeHandler","formControl","control","target","validateControl","name","isValid","trim","test","String","toLowerCase","onSubmit","AuthForm","renderInput","disabled","isLogin","authData","returnSecureToken","post","expirationDate","Date","getTime","expiresIn","setItem","localId","Select","options","option","createControl","config","validation","validate","validateForm","hasOwnProperty","QuestionareTitle","QuestionareTitleChange","createFormControls","option1","option2","option3","option4","QuizCreator","questionareTitleSelected","addQuestionHandler","questionItem","quiz","addQuestion","createQuizHandler","changeHandler","controlName","renderInputs","controlN","selectChangeHandler","inputValue","select","createQuiz","Logout","App","autoLogin","routes","path","component","withRouter","Boolean","hostname","match","intialState","initialState","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e08489e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button__button___3IxNo\",\"error\":\"button__error___14BS3\",\"success\":\"button__success___aycff\",\"primary\":\"button__primary___dNO26\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Drawer\":\"Drawer__Drawer___2Nzcl\",\"close\":\"Drawer__close___3eUiV\",\"active\":\"Drawer__active___WxScd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuestionnaire\":\"ActiveQuestionnaire__ActiveQuestionnaire___DWwUW\",\"Question\":\"ActiveQuestionnaire__Question___BgvDm\",\"small\":\"ActiveQuestionnaire__small___1uPtt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MenuToggle\":\"MenuToggle__MenuToggle___1mqO0\",\"open\":\"MenuToggle__open___1kMjG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainQuiz\":\"MainQuiz__MainQuiz___2xG3-\",\"MainQuizWrapper\":\"MainQuiz__MainQuizWrapper___Jyt6o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem__AnswerItem___1ykmf\",\"success\":\"AnswerItem__success___2fUsY\",\"error\":\"AnswerItem__error___26eF_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds\":\"Loader__lds___3ZToI\",\"lds-dual-ring\":\"Loader__lds-dual-ring___i0nZL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GuestScreen\":\"GuestScreen__GuestScreen___vT31O\",\"Div\":\"GuestScreen__Div___1yz2g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth___2YUr1\",\"AuthForm\":\"Auth__AuthForm___2Xb4F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input___s67N0\",\"invalid\":\"Input__invalid___flTJ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout__Layout___2C2_c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"BackDrop__Backdrop___3xmex\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList__AnswersList___1WbU-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FinishedQuestionnaire\":\"FinishedQuestionnaire__FinishedQuestionnaire___1RBap\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemsList\":\"itemsList__itemsList___1WI4F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ListItem\":\"ListItem__ListItem___2hey1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"QuizCreator\":\"QuizCreator__QuizCreator___1FpN9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Select\":\"Select__Select___1rPbL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"QuestionareTitle\":\"QuestionareTitle__QuestionareTitle___UCwso\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App___1o-Fp\"};","import React from 'react'\r\nimport styles from './MenuToggle.css'\r\n\r\n\r\nconst MenuToggle = (props) => {\r\n    const cls = [\r\n        styles.MenuToggle,\r\n        'fa'\r\n    ]\r\n\r\n    if(props.isOpen){\r\n        cls.push('fa-times')\r\n        cls.push(styles.open)\r\n    }else{\r\n        cls.push('fa-bars')\r\n    }\r\n    \r\n    return(\r\n        <i \r\n            className={cls.join(' ')}\r\n            onClick={props.onToggle}\r\n        />\r\n    )\r\n}\r\n\r\nexport default MenuToggle","import React from 'react'\r\nimport styles from './BackDrop.css'\r\n\r\nconst BackDrop = (props) => {\r\n    \r\n    return(\r\n        <div \r\n        className={styles.Backdrop}\r\n        onClick={props.onClick}\r\n        >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BackDrop","import React, {Component} from 'react'\r\nimport styles from './Drawer.css'\r\nimport {NavLink} from 'react-router-dom'\r\nimport BackDrop from '../../UI/BackDrop/BackDrop'\r\n\r\n\r\nclass Drawer extends Component {\r\n\r\n    renderLinks(links){\r\n        return links.map((link, index) => {\r\n            return (\r\n                <li key={index}\r\n                >\r\n                    <NavLink\r\n                    to={link.to}\r\n                    exact={link.exact}\r\n                    activeClassName={styles.active}\r\n                    onClick={this.props.onClose}\r\n                    >\r\n                        {link.label}\r\n                    </NavLink>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n    \r\n    \r\n    render(){\r\n        const cls = [styles.Drawer]\r\n        \r\n        if(!this.props.isOpen){\r\n            cls.push(styles.close)\r\n        } \r\n        \r\n        let links = [{to: '/', label: 'Список тестов', exact: true}]\r\n\r\n        if(this.props.isAuthenticated){\r\n            links.push({to: '/create-quize', label: 'Создать тест', exact: false})\r\n            links.push({to: '/logout', label: 'Выйти', exact: false})\r\n        } else {\r\n            links.push({to: '/auth', label: 'Аутентификация', exact: false})\r\n        }\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <nav className={cls.join(' ')}>\r\n                    <ul>\r\n                        {this.renderLinks(links)}\r\n                    </ul>\r\n                </nav>\r\n                \r\n                {this.props.isOpen \r\n                ? <BackDrop\r\n                onClick={this.props.onClose}\r\n                /> \r\n                : null}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Drawer","import React, { Component } from 'react'\r\nimport styles from './Layout.css'\r\nimport MenuToggle from '../../components/Navigation/MenuToggle/MenuToggle'\r\nimport Drawer from '../../components/Navigation/Drawer/Drawer'\r\nimport { connect } from 'react-redux';\r\n\r\nclass Layout extends Component {\r\n\r\n    state = {\r\n        menu: false\r\n    }\r\n\r\n    ToogleMenu = () => {\r\n        this.setState({\r\n            menu: !this.state.menu\r\n        })\r\n    }\r\n\r\n    menuClose = () => {\r\n        this.setState({\r\n            menu: false\r\n        })\r\n    }\r\n\r\n    styles = {\r\n        color: {\r\n            \"background-color\": 'red'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.Layout}>\r\n                <Drawer\r\n                    isOpen={this.state.menu}\r\n                    onClose={this.menuClose}\r\n                    isAuthenticated={this.props.isAuthenticated}\r\n                />\r\n                <MenuToggle\r\n                    onToggle={this.ToogleMenu}\r\n                    isOpen={this.state.menu}\r\n                />\r\n\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isAuthenticated: !!state.auth.token\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Layout)","import React from 'react'\r\nimport styles from './AnswerItem.css'\r\n\r\n\r\nconst AnswerItem = (props) => {\r\n    const cls = [styles.AnswerItem]\r\n\r\n    if(props.answerState){\r\n        cls.push(styles[props.answerState])\r\n    }\r\n    \r\n    return(\r\n        <li className={cls.join(' ')}\r\n        onClick={()=> props.answerClick(props.answer.id)}\r\n        >\r\n            {props.answer.text}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default AnswerItem","import React from 'react'\r\nimport styles from './AnswersList.css'\r\nimport AnswerItem from './AnswerItem/AnswerItem'\r\n\r\nconst AnswersList = (props) => {\r\n    return (\r\n        <ul className={styles.AnswersList}>\r\n\r\n            {props.answers.map((answer, index) => {\r\n\r\n                return (\r\n                    <AnswerItem\r\n                        key={index}\r\n                        answer={answer}\r\n                        answerClick={props.answerClick}\r\n                        answerState={props.answerState ? props.answerState[answer.id] : null}\r\n                    />\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default AnswersList","import React from 'react'\r\nimport classes from './ActiveQuestionnaire.css'\r\nimport AnswersList from './AnswersList/AnswersList'\r\n\r\nconst ActiveQuestionnaire = (props) => {\r\n    return (\r\n        <div className={classes.ActiveQuestionnaire}>  \r\n         \r\n            <p className={classes.Question}>\r\n                <span>\r\n                    <strong>{props.QuestionNum}.</strong> &nbsp;\r\n                    {props.textQuestion}\r\n                </span>\r\n\r\n                <small className={classes.small}>{props.QuestionNum} из {props.totalNumQuestions}</small>\r\n            </p>\r\n\r\n            <AnswersList \r\n                answers={props.answers}\r\n                answerClick={props.answerClick}\r\n                answerState={props.answerState}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActiveQuestionnaire","import React from 'react'\r\nimport styles from './button.css'\r\n\r\nconst Button = (props) => {\r\n    const cls = [\r\n        styles.button,\r\n        styles[props.type],\r\n    ]\r\n\r\n    return (\r\n        <button \r\n        className={cls.join(' ')}\r\n        onClick={props.onClick}>\r\n            {props.children}\r\n        </button>\r\n   )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport styles from './FinishedQuestionnaire.css'\r\nimport Button from '../UI/button/button'\r\n\r\nconst FinishedQuestionnaire = (props) => {\r\n    const rightAnswers = Object.keys(props.results).reduce((accum, key) => {\r\n        if(props.results[key]=== 'success'){\r\n            accum++\r\n        }\r\n        return accum\r\n    }, 0)\r\n    \r\n    return(\r\n        <div className = {styles.FinishedQuestionnaire}>\r\n            <ul>\r\n                {props.questions.map((question, index)=>{\r\n                    const cls = [\r\n                        'fa',\r\n                        props.results[question.id] === 'error' ? 'fa-times' : 'fa-check'\r\n                    ]\r\n\r\n                    return (\r\n                        <li key={index}>\r\n                            <strong>{index + 1}.</strong>&nbsp;\r\n                            {question.question}\r\n                            <i className={cls.join(' ')}/>\r\n                        </li>\r\n                    )\r\n                })\r\n                }  \r\n            </ul>\r\n\r\n            <p>Правильно {rightAnswers} из {props.questions.length}</p>\r\n\r\n            <div>\r\n                <Button type=\"primary\"\r\n                onClick={props.onRetry}> Повторить\r\n                </Button>\r\n\r\n                <Button type=\"success\"\r\n                onClick={props.onRepeat}> Перейти к списку тестов\r\n                </Button>\r\n            </div>\r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default FinishedQuestionnaire","import React from 'react'\r\nimport styles from './Loader.css'\r\n\r\nconst Loader = () => {\r\n    console.log(styles);\r\n    \r\n    return (\r\n        <div className={styles.lds} />\r\n    )\r\n}\r\n\r\nexport default Loader","import axios from 'axios'\r\n\r\nimport {    FETCH_QUESTIONARE_TITLES, \r\n    FETCH_QUESTIONARE_TITLES_ERROR, \r\n    FETCH_TEST_ID,\r\n    FETCH_ACTIVE_QUESTIONARE_TITLE_AND_QUESTIONS,\r\n    RETRY_HANDLER, \r\n    ANSWER,\r\n    IS_QUESTIONNAIRE_FINISHED,\r\n    NEXT_QUESTION,\r\n    REPEAT_HANDLER,\r\n    GUEST_SCREEN_OFF,\r\n    QUIZ_SET_STATE\r\n} from './actionTypes'\r\n\r\nexport function fetchAllTestsTitles() {\r\n    return async dispatch => {\r\n        try {\r\n            const response = await axios.get('https://quiz-316f6.firebaseio.com/quizes.json')\r\n\r\n            const allQuestionnaireTitles = []\r\n\r\n            Object.keys(response.data).forEach(key => {\r\n                let t = [key, response.data[key][0].questionareTitle]\r\n                allQuestionnaireTitles.push(t)\r\n\r\n            })\r\n            // console.log('ВСЕ ЗАГОЛОВКИ ОПРОСОВ', allQuestionnaireTitles)\r\n            dispatch(fetchAllQuestionnaireTitles(allQuestionnaireTitles))\r\n\r\n        } catch (e) {\r\n            dispatch(fetchAllQuestionnaireTitlesError(e))\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function testID(testId) {\r\n    return {\r\n        type: FETCH_TEST_ID,\r\n        testId: testId\r\n    }\r\n}\r\n\r\nexport function fetchAllQuestionnaireTitles(allQuestionnaireTitles) {\r\n    return {\r\n        type: FETCH_QUESTIONARE_TITLES,\r\n        allQuestionnaireTitles\r\n    }\r\n}\r\n\r\nexport function fetchAllQuestionnaireTitlesError(e) {\r\n    return {\r\n        type: FETCH_QUESTIONARE_TITLES_ERROR,\r\n        error: e\r\n    }\r\n}\r\n\r\nexport function fetchActiveTest(testId) {\r\n    return async dispatch => {\r\n        let Title = null\r\n        let questions = []\r\n        try {\r\n            const response = await axios.get(`https://quiz-316f6.firebaseio.com/quizes/${testId}.json`)\r\n            response.data.forEach(item => {\r\n                Title = item.questionareTitle\r\n                questions.push(item)\r\n            })\r\n\r\n            dispatch(fetchActiveTestTitleQuestions(Title, questions))\r\n        } catch (e) {\r\n            dispatch(fetchActiveTestTitleQuestionsError(e))\r\n        }\r\n    }\r\n}\r\n\r\nexport function answerClick(answerId) {\r\n    return (dispatch,getState)  => {\r\n        const state = getState().allTests\r\n\r\n        if (state.answerState) {\r\n            const key = Object.keys(state.answerState)[0]\r\n            if (state.answerState[key] === 'success') {\r\n                return\r\n            }\r\n        }\r\n\r\n        const question = state.questions[state.activeQuestion]\r\n        const result = state.results\r\n\r\n        if (question.rightAnswerId === answerId) {\r\n            if (!result[question.id]) {\r\n                result[question.id] = 'success'\r\n            }\r\n\r\n            dispatch(Answer({ [answerId]: 'success' }, result))\r\n\r\n            const timeout = window.setTimeout(() => {\r\n                if (isQuestionnaireFinished(state)) {\r\n                    dispatch(QuestionnaireFinished())\r\n                } else {\r\n                    dispatch(nextQuestion(state.activeQuestion + 1))\r\n                }\r\n                window.clearTimeout(timeout)\r\n            }, 1000)\r\n\r\n        } else {\r\n            result[question.id] = 'error'\r\n            dispatch(Answer({[answerId]: 'error'}, result))\r\n            const timeout = window.setTimeout(() => {\r\n                if (isQuestionnaireFinished(state)) {\r\n                    dispatch(QuestionnaireFinished())\r\n                } else {\r\n                    dispatch(nextQuestion(state.activeQuestion + 1))\r\n                }\r\n                window.clearTimeout(timeout)\r\n            }, 1000)\r\n        }\r\n    }\r\n}\r\n\r\nexport function quizSetState(answerState, results) {\r\n    return {\r\n      type: QUIZ_SET_STATE,\r\n      answerState, results\r\n    }\r\n  }\r\n\r\nexport function Answer(answerState, result) {\r\n    return {\r\n        type: ANSWER,\r\n        answerState: answerState,\r\n        results: result\r\n    }\r\n}\r\n\r\n\r\nexport function isQuestionnaireFinished(state) {\r\n    return state.activeQuestion + 1 === state.questions.length\r\n}\r\n\r\nexport function QuestionnaireFinished() {\r\n    return {\r\n        type: IS_QUESTIONNAIRE_FINISHED,\r\n    }\r\n}\r\n\r\nexport function nextQuestion(number) {\r\n    return {\r\n        type: NEXT_QUESTION,\r\n        number\r\n    }\r\n}\r\n\r\n\r\nexport function fetchActiveTestTitleQuestions(title, questions) {\r\n    return {\r\n        type: FETCH_ACTIVE_QUESTIONARE_TITLE_AND_QUESTIONS,\r\n        questionnaireTitle: title,\r\n        questions: questions\r\n    }\r\n}\r\n\r\nexport function fetchActiveTestTitleQuestionsError(e) {\r\n    return {\r\n        type: FETCH_QUESTIONARE_TITLES_ERROR,\r\n        error: e\r\n    }\r\n}\r\n\r\nexport function retryHandler() {\r\n    return {\r\n        type: RETRY_HANDLER\r\n    }\r\n}\r\n\r\nexport function repeatHandler() {\r\n    return {\r\n        type: REPEAT_HANDLER\r\n    }\r\n}\r\n\r\nexport function guestScreenOff() {\r\n    return {\r\n        type: GUEST_SCREEN_OFF\r\n    }\r\n}\r\n","export const FETCH_QUESTIONARE_TITLES = 'FETCH_QUESTIONARE_TITLES'\r\nexport const FETCH_QUESTIONARE_TITLES_ERROR = 'FETCH_QUESTIONARE_TITLES_ERROR'\r\nexport const FETCH_TEST_ID = 'FETCH_TEST_ID'\r\n\r\nexport const FETCH_ACTIVE_QUESTIONARE_TITLE_AND_QUESTIONS = 'FETCH_ACTIVE_QUESTIONARE_TITLE_AND_QUESTIONS'\r\nexport const RETRY_HANDLER = 'RETRY_HANDLER'\r\nexport const REPEAT_HANDLER = 'REPEAT_HANDLER'\r\nexport const ANSWER = 'ANSWER'\r\n\r\nexport const IS_QUESTIONNAIRE_FINISHED = 'IS_QUESTIONNAIRE_FINISHED'\r\nexport const NEXT_QUESTION = 'NEXT_QUESTION'\r\nexport const QUESTION = 'QUESTION'\r\nexport const CREATE_QUIZ  = 'CREATE_QUIZ'\r\n\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS'\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT'\r\nexport const GUEST_SCREEN_OFF = 'GUEST_SCREEN_OFF'\r\nexport const QUIZ_SET_STATE = 'QUIZ_SET_STATE'\r\n","import React, { Component } from 'react'\r\nimport styles from './MainQuiz.css';\r\nimport ActiveQuestionnaire from '../components/ActiveQuestionnaire/ActiveQuestionnaire'\r\nimport FinishedQuestionnaire from '../components/finishedQuestionnaire/FinishedQuestionnaire'\r\nimport Loader from '../components/UI/Loader/Loader'\r\nimport { connect } from 'react-redux';\r\nimport { fetchActiveTest, retryHandler, repeatHandler, answerClick } from '../store/actions/guestScreenActions'\r\n\r\n\r\n\r\nclass MainQuiz extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchActiveTest(this.props.testId || this.props.location.pathname.split('/')[2])\r\n    }\r\n\r\n    backToList = () => {\r\n        this.props.history.push('/')\r\n        this.props.repeatHandler()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    <div className={styles.MainQuiz}>\r\n                        <div className={styles.MainQuizWrapper}>\r\n                            <h1>{`\"${this.props.questionnaireTitle}\"`}</h1>\r\n                            {\r\n                                !this.props.questionsLoad\r\n                                    ? <Loader />\r\n                                    : this.props.isFinished\r\n                                        ? <FinishedQuestionnaire\r\n                                            results={this.props.results}\r\n                                            questions={this.props.questions}\r\n                                            onRetry={this.props.retryHandler}\r\n                                            onRepeat={this.backToList}\r\n                                        />\r\n                                        : <ActiveQuestionnaire\r\n                                            key={this.props.questions[this.props.activeQuestion].id}\r\n                                            answers={this.props.questions[this.props.activeQuestion].answers}\r\n                                            textQuestion={this.props.questions[this.props.activeQuestion].question}\r\n                                            answerClick={this.props.answerClick}\r\n                                            totalNumQuestions={this.props.questions.length}\r\n                                            QuestionNum={this.props.activeQuestion + 1}\r\n                                            answerState={this.props.answerState}\r\n                                        />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        results: state.allTests.results, //{[id]: success error}\r\n        testId: state.allTests.testId, \r\n        isFinished: state.allTests.isFinished,\r\n        questionsLoad: state.allTests.questionsLoad,\r\n        activeQuestion: state.allTests.activeQuestion,\r\n        answerState: state.allTests.answerState,// {[answerId: 'success' or 'error']}\r\n        questionnaireTitle: state.allTests.questionnaireTitle,\r\n        key: state.allTests.key,\r\n        questions: state.allTests.questions\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchActiveTest: (testId) => dispatch(fetchActiveTest(testId)),\r\n        retryHandler: () => dispatch(retryHandler()),\r\n        repeatHandler: () => dispatch(repeatHandler()),\r\n        answerClick: (answerId) => dispatch(answerClick(answerId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainQuiz)","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport styles from './ListItem.css'\r\n\r\nconst ListItem = (props) => {\r\n    localStorage.getItem('token')\r\n    let url = '/'\r\n    if (localStorage.getItem('token')) {\r\n        url = '/quiz/' + props.id\r\n    }\r\n\r\n    return (\r\n        <li className={styles.ListItem}\r\n            onClick={() => { props.onClick(props.id) }} // передавать айди\r\n        >\r\n            <NavLink to={url}>\r\n                {props.title}\r\n            </NavLink>\r\n\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ListItem","import React from 'react'\r\nimport styles from './itemsList.css'\r\nimport ListItem from './ListItem/ListItem'\r\n\r\n\r\n\r\nconst ItemsList = (props) => {\r\n    return (\r\n        <ul className={styles.itemsList}>\r\n            {\r\n                props.allTitles.map((title, index) => {\r\n                    return (\r\n                        <ListItem\r\n                            id={title[0]}\r\n                            key={index}\r\n                            title={title[1]}\r\n                            onClick={props.onClick}\r\n                        />\r\n                    )\r\n                })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default ItemsList","import React, { Component } from 'react'\r\nimport styles from './GuestScreen.css'\r\nimport ItemsList from './ItemsList/ItemsList'\r\nimport MainQuiz from '../../../containers/MainQuiz'\r\nimport { connect } from 'react-redux'\r\nimport { fetchAllTestsTitles, testID, guestScreenOff } from '../../../store/actions/guestScreenActions'\r\nimport button from '../button/button'\r\nimport clases from '../button/button.css'\r\n\r\n\r\nclass GuestScreen extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAllTestsTitles()\r\n    }\r\n\r\n    redirect = () => {\r\n        this.props.history.push('/auth')\r\n        this.props.guestScreenOff()\r\n    }\r\n\r\n    render() {\r\n        const cls = [\r\n            clases.button,\r\n            clases.success\r\n        ]\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    !this.props.isAuthenticated\r\n                    ? <div className={styles.Div}>\r\n                        <h1>В системе доступны следующие тесты :</h1>\r\n                        <ItemsList\r\n                            allTitles={this.props.allQuestionnaireTitles}\r\n                            onClick={this.props.testID}\r\n                        />\r\n                        <p>но их нельзя запустить пока вы не авторизованы</p>\r\n                        <button\r\n                            className={cls.join(' ')}\r\n                            onClick={this.redirect}\r\n                            children={'Регистрация/Аутентификация'}\r\n                        />\r\n                      </div>\r\n                    :\r\n                        this.props.guestScreen\r\n                        ?\r\n                        <div className={styles.GuestScreen}>\r\n                            <h1>В системе доступны следующие тесты :</h1>\r\n                            <ItemsList\r\n                                onClick={this.props.testID}\r\n                                allTitles={this.props.allQuestionnaireTitles}\r\n                            />\r\n                        </div>\r\n                        :\r\n                        <MainQuiz\r\n                            TESTId={this.props.testId}\r\n                        />\r\n                }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        guestScreen: state.allTests.guestScreen,\r\n        allQuestionnaireTitles: state.allTests.allQuestionnaireTitles,\r\n        testId: state.allTests.testId,\r\n        isAuthenticated: !!state.auth.token\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchAllTestsTitles: () => dispatch(fetchAllTestsTitles()),\r\n        testID: (testId) => dispatch(testID(testId)),\r\n        guestScreenOff: () => dispatch(guestScreenOff())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestScreen) ","import React from 'react'\r\nimport styles from './Input.css'\r\n\r\nfunction isInvalid({valid, touched, shouldValidate}) {\r\n    if(!valid && shouldValidate && touched) { // контрол не валидный, подлежит валидации, в него уже что то вводили\r\n        return true // не прошел валидацию\r\n    }\r\n    return false\r\n}\r\n\r\nconst Input = (props) => {\r\n    const inputType = props.type || 'text'\r\n    const cls = [styles.Input]\r\n    const htmlFor = `${inputType} - ${Math.random()}`\r\n\r\n    if(isInvalid(props)){\r\n        cls.push(styles.invalid)\r\n    }\r\n\r\nreturn (\r\n    <div className={cls.join(' ')}>\r\n        <label htmlFor={htmlFor}>{props.label}</label>\r\n        <input\r\n        type={inputType}\r\n        id={htmlFor}\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n        />\r\n\r\n        {isInvalid(props)\r\n            ? <span>{props.errorMessage || 'Введите верное значение'}</span>\r\n            : null\r\n        }\r\n    </div>\r\n\r\n)}\r\n\r\nexport default Input","import {AUTH_SUCCESS, AUTH_LOGOUT} from './actionTypes'\r\nimport axios from 'axios'\r\n\r\nexport function auth(email, password, isLogin) {\r\n    return async dispatch => {\r\n\r\n        const authData = {\r\n            email: email,\r\n            password: password,\r\n            returnSecureToken: true\r\n        }\r\n\r\n        let url = ''\r\n        if (isLogin) {\r\n            url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyALD2dHT9lF2G6-J7nv3BtJkrMcUhk8HgI'\r\n        } else {\r\n            url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyALD2dHT9lF2G6-J7nv3BtJkrMcUhk8HgI'\r\n        }\r\n        const response = await axios.post(url, authData)\r\n        const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\r\n\r\n        localStorage.setItem('token', response.data.idToken)\r\n        localStorage.setItem('userId', response.data.localId)\r\n        localStorage.setItem('expirationDate', expirationDate)\r\n\r\n        dispatch(authSuccess(response.data.idToken))\r\n        dispatch(autoLogout(response.data.expiresIn))\r\n    }\r\n}\r\n\r\n export function authSuccess(idToken) {\r\n    return {\r\n        type: AUTH_SUCCESS,\r\n        token: idToken\r\n    }\r\n}\r\n\r\nexport function autoLogout(time) {\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(logout())\r\n        }, time * 1000)\r\n    }\r\n}\r\n\r\nexport function logout(){\r\n        localStorage.removeItem('token')\r\n        localStorage.removeItem('userId')\r\n        localStorage.removeItem('expirationDate')\r\n    return {\r\n        type: AUTH_LOGOUT\r\n    }\r\n}\r\n\r\nexport function autoLogin(){\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token')\r\n        if(!token){\r\n            dispatch(logout())\r\n        } else {\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\r\n            if(expirationDate <= new Date()) {\r\n                dispatch(logout())\r\n            } else {\r\n                dispatch(authSuccess(token))\r\n                dispatch(autoLogout(expirationDate.getTime() - new Date().getTime() / 1000))\r\n            }\r\n        }\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport styles from './Auth.css'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/button/button'\r\nimport { connect } from 'react-redux'\r\nimport { auth } from '../../store/actions/authActions'\r\n\r\nfunction validateEmail(email) {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: {\r\n            email: {\r\n                value: '',\r\n                type: 'email',\r\n                label: 'Email',\r\n                errorMessage: 'Сдается мне ты пытаешься скользонуть?',\r\n                valid: false,\r\n                touched: false,\r\n                validations: {\r\n                    required: true,\r\n                    email: true\r\n                }\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Пароль',\r\n                errorMessage: 'Пароль гниловат',\r\n                valid: false,\r\n                touched: false,\r\n                validations: {\r\n                    required: true,\r\n                    minLength: 6\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault()\r\n    }\r\n\r\n    loginHandler = (event) => {\r\n        if (!this.state.isFormValid) {\r\n            event.preventDefault()\r\n        }\r\n\r\n        this.props.auth(this.state.formControls.email.value, this.state.formControls.password.value, true)\r\n    }\r\n\r\n\r\n\r\n    registerHandler = () => {\r\n        this.props.auth(this.state.formControls.email.value, this.state.formControls.password.value, false)\r\n    }\r\n\r\n    renderInput() {\r\n        return Object.keys(this.state.formControls).map((formControl, index) => {\r\n            const control = this.state.formControls[formControl]\r\n\r\n            return (\r\n\r\n                \r\n                    <Input\r\n                    key={index}\r\n                    type={control.type}\r\n                    label={control.label}\r\n                    errorMessage={control.errorMessage}\r\n                    valid={control.valid}\r\n                    touched={control.touched}\r\n                    shouldValidate={true}\r\n                    onChange={event => this.onChangeHandler(event, formControl)}\r\n                />\r\n                \r\n                \r\n\r\n\r\n            )\r\n        })\r\n    }\r\n\r\n    validateControl(value, validations) {\r\n        if (!validations) {\r\n            return true\r\n        }\r\n\r\n        let isValid = true\r\n\r\n        if (validations.required) {\r\n            isValid = value.trim() !== '' && isValid\r\n        }\r\n\r\n        if (validations.email) {\r\n            isValid = validateEmail(value) && isValid\r\n        }\r\n\r\n        if (validations.minLength) {\r\n            isValid = value.length >= validations.minLength && isValid\r\n        }\r\n\r\n\r\n\r\n        return isValid\r\n\r\n    }\r\n\r\n    onChangeHandler = (event, formControl) => {\r\n\r\n        const formControls = { ...this.state.formControls }\r\n        const control = { ...formControls[formControl] }\r\n\r\n        control.value = event.target.value\r\n        control.touched = true\r\n        control.valid = this.validateControl(control.value, control.validations)\r\n\r\n        formControls[formControl] = control\r\n\r\n        let isFormValid = true\r\n\r\n        Object.keys(formControls).forEach(name => {\r\n            isFormValid = formControls[name].valid && isFormValid\r\n\r\n        })\r\n        \r\n        this.setState({\r\n            formControls,\r\n            isFormValid\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={styles.Auth}>\r\n                <div>\r\n                    <h1>Аутентификация</h1>\r\n\r\n                    <form onSubmit={this.submitHandler} className={styles.AuthForm}>\r\n                        {this.renderInput()}\r\n\r\n                        <Button\r\n                            type=\"success\"\r\n                            onClick={this.loginHandler}\r\n                            disabled={!this.state.isFormValid}\r\n\r\n                        >\r\n                            Войти\r\n                        </Button>\r\n                        \r\n                        <Button\r\n                            type=\"primary\"\r\n                            onClick={this.registerHandler}\r\n                            disabled={this.state.isFormValid}\r\n                        >\r\n                            Зарегистрироваться\r\n                        </Button>\r\n                    </form>\r\n                    <div>\r\n                    <p>Тестовые данные для входа в систему</p>\r\n                        <span>mail@gmail.com</span>  <span>123698745</span>  \r\n                    </div>  \r\n\r\n                </div>\r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        auth: (email, password, isLogin) => dispatch(auth(email, password, isLogin))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Auth)\r\n\r\n","import React from 'react'\r\nimport styles from './Select.css'\r\n\r\n\r\n const Select = (props) => {\r\n    const htmlFor = `${props.label}-${Math.random()}`\r\n    return (<div className={styles.Select}>\r\n        <label htmlFor={htmlFor}></label>\r\n        <select \r\n        id={htmlFor}\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n        >\r\n            { props.options.map((option, index) =>{\r\n                return (\r\n                    <option\r\n                    value={option.value}\r\n                    key={option.value + index}\r\n                    >\r\n                        {option.text}\r\n                    </option>  \r\n                )\r\n            })}\r\n        </select>\r\n    </div>)\r\n}\r\n\r\nexport default Select","export function createControl(config, validation) {\r\n    return {\r\n        ...config,\r\n        validation,\r\n        valid: !validation, // Если передали что то в валидацию значение по умолчанию будет false\r\n        touched: false,\r\n        value: ''\r\n    }\r\n}\r\n\r\nexport function validate (value, validation = null) {\r\n    if(!validation){\r\n        return true\r\n    }\r\n\r\n    let isValid = true \r\n\r\n    if(validation.required) {\r\n        isValid = value.trim() !== '' && isValid\r\n    }\r\n    if(value <= validation.minLength){\r\n        isValid = false && isValid\r\n    }\r\n    return isValid\r\n}\r\n\r\nexport function  validateForm(formControls){\r\n    let isFormValid = true\r\n\r\n    for (let control in formControls) {\r\n        if (formControls.hasOwnProperty(control)) {\r\n          isFormValid = formControls[control].valid && isFormValid\r\n        }\r\n      }\r\n\r\n    return isFormValid\r\n}","import React from 'react'\r\nimport styles from './QuestionareTitle.css'\r\nimport Button from '../../../components/UI/button/button'\r\n\r\nconst QuestionareTitle = (props) => {\r\n    return (\r\n        <form className={styles.QuestionareTitle}>\r\n            <label htmlFor=\"QuestionareTitle\">Ведите название Вашего опроса</label>\r\n            <input id='QuestionareTitle'\r\n                onChange={props.QuestionareTitleChange}\r\n            ></input>\r\n            <span>{props.errorMessage}</span>\r\n            <Button\r\n                type=\"primary\"\r\n                onClick={props.QuestionareTitle}\r\n            >\r\n                Подтвердить название\r\n            </Button>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default QuestionareTitle","import React, { Component } from 'react'\r\nimport styles from './QuizCreator.css'\r\nimport Select from '../../components/UI/Select/Select'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/button/button'\r\nimport { createControl, validate, validateForm } from './../../FormFrames/formFrameworks';\r\nimport QuestionareTitle from './QuestionareTitle/QuestionareTitle'\r\nimport { connect } from 'react-redux'\r\nimport { addQuestion, createQuiz } from '../../store/actions/createTestActions'\r\n\r\nfunction createFormControls() {\r\n    return {\r\n        question: createControl({\r\n            label: 'Введите вопрос',\r\n            errorMessage: 'Вопрос не может быть пустым или короче 5 символов'\r\n        }, {\r\n            required: true,\r\n            minLength: 5\r\n        }),\r\n        option1: createControl({\r\n            label: 'Вариант 1',\r\n            errorMessage: 'Вариант не должен быть пустым',\r\n            id: 1\r\n        }, { required: true }),\r\n        option2: createControl({\r\n            label: 'Вариант 2',\r\n            errorMessage: 'Вариант не должен быть пустым',\r\n            id: 2\r\n        }, { required: true }),\r\n        option3: createControl({\r\n            label: 'Вариант 3',\r\n            errorMessage: 'Вариант не должен быть пустым',\r\n            id: 3\r\n        }, { required: true }),\r\n        option4: createControl({\r\n            label: 'Вариант 4',\r\n            errorMessage: 'Вариант не должен быть пустым',\r\n            id: 4\r\n\r\n        }, { required: true })\r\n    }\r\n}\r\n\r\nclass QuizCreator extends Component {\r\n\r\n    state = {\r\n        questionareTitleSelected: false,\r\n        questionareTitle: '',\r\n        isFormValid: false,\r\n        rightAnswerId: 1,\r\n        formControls: createFormControls()\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault()\r\n    }\r\n\r\n    addQuestionHandler = (event) => {\r\n        event.preventDefault()\r\n\r\n        const questionItem = {\r\n            questionareTitle: this.state.questionareTitle,\r\n            question: this.state.formControls.question.value,\r\n            id: this.props.quiz.length + 1,\r\n            rightAnswerId: this.state.rightAnswerId,\r\n            answers: [\r\n                {\r\n                    text: this.state.formControls.option1.value,\r\n                    id: this.state.formControls.option1.id\r\n                },\r\n                {\r\n                    text: this.state.formControls.option2.value,\r\n                    id: this.state.formControls.option2.id\r\n                },\r\n                {\r\n                    text: this.state.formControls.option3.value,\r\n                    id: this.state.formControls.option3.id\r\n                },\r\n                {\r\n                    text: this.state.formControls.option4.value,\r\n                    id: this.state.formControls.option4.id\r\n                }\r\n            ]\r\n        }\r\n        this.props.addQuestion(questionItem)\r\n\r\n        this.setState({\r\n            isFormValid: false,\r\n            rightAnswerId: 1,\r\n            formControls: createFormControls()\r\n        })\r\n    }\r\n\r\n    createQuizHandler = event => {\r\n        event.preventDefault()\r\n\r\n            this.setState({\r\n                isFormValid: false,\r\n                rightAnswerId: 1,\r\n                formControls: createFormControls(),\r\n                questionareTitleSelected: false\r\n            })\r\n        }\r\n\r\n    changeHandler = (value, controlName) => {\r\n        const formControls = { ...this.state.formControls }\r\n        const control = { ...formControls[controlName] }\r\n\r\n        control.touched = true\r\n        control.value = value\r\n        control.valid = validate(control.value, control.validation)\r\n\r\n        formControls[controlName] = control\r\n\r\n        this.setState({\r\n            formControls: formControls,\r\n            isFormValid: validateForm(formControls)\r\n        })\r\n    }\r\n\r\n    renderInputs = () => {\r\n        return Object.keys(this.state.formControls).map((controlN, index) => {\r\n            const control = this.state.formControls[controlN]\r\n\r\n            return (\r\n                <React.Fragment key={controlN + index}>\r\n                    <Input\r\n                        key={index}\r\n                        label={control.label}\r\n                        value={control.value}\r\n                        valid={control.valid}\r\n                        shouldValidate={!!control.validation}\r\n                        touched={control.touched}\r\n                        errorMessage={control.errorMessage}\r\n                        onChange={event => this.changeHandler(event.target.value, controlN)}\r\n                    />\r\n\r\n                    {\r\n                        index === 0 ? <hr></hr> : null\r\n                    }\r\n                </React.Fragment>\r\n            )\r\n        })\r\n    }\r\n\r\n    selectChangeHandler = (event) => {\r\n        this.setState({\r\n            rightAnswerId: +event.target.value\r\n        })\r\n    }\r\n\r\n    questionareTitle = (event) => {\r\n        event.preventDefault()\r\n        if (this.state.questionareTitle.trim().length > 5) {\r\n            this.setState({\r\n                questionareTitleSelected: true\r\n            })\r\n        }\r\n    }\r\n\r\n    QuestionareTitleChange = (event) => {\r\n        let inputValue = event.target.value\r\n        this.setState({\r\n            questionareTitle: inputValue\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const select = <Select\r\n            label=\"Выберите правильный ответ\"\r\n            value={this.state.rightAnswerId}\r\n            onChange={this.selectChangeHandler}\r\n            options={[\r\n                { text: 1, value: 1 },\r\n                { text: 2, value: 2 },\r\n                { text: 3, value: 3 },\r\n                { text: 4, value: 4 }\r\n            ]}\r\n\r\n        />\r\n        return (\r\n            <div className={styles.QuizCreator}>\r\n\r\n                {\r\n                    this.state.questionareTitleSelected === false ?\r\n                        <QuestionareTitle\r\n                            QuestionareTitle={this.questionareTitle}\r\n                            QuestionareTitleChange={this.QuestionareTitleChange}\r\n                            errorMessage={\r\n                                this.state.questionareTitle.trim().length > 5\r\n                                    ? null\r\n                                    : 'Заголовок не должен быть пустым или короче 5 сиволов'}\r\n                        />\r\n                        : <div>\r\n                            <h1>Создание теста</h1>\r\n\r\n                            <form onSubmit={this.submitHandler}>\r\n\r\n                                {this.renderInputs()}\r\n\r\n                                {select}\r\n\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    onClick={this.addQuestionHandler}\r\n                                    disabled={!this.state.isFormValid}\r\n                                >\r\n                                    Добавить вопрос\r\n                            </Button>\r\n\r\n                                <Button\r\n                                    type=\"success\"\r\n                                    onClick={this.createQuizHandler}\r\n                                    disabled={this.props.quiz.length === 0}\r\n                                >\r\n                                    Создать тест\r\n                            </Button>\r\n\r\n                            </form>\r\n                        </div>\r\n                }\r\n            </div>\r\n        )}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        quiz: state.allTests.quiz\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        addQuestion: (questionItem) => dispatch(addQuestion(questionItem)) ,\r\n        createQuiz: () => dispatch(createQuiz())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizCreator)","import axios from 'axios'\r\nimport { QUESTION, CREATE_QUIZ } from './actionTypes'\r\n\r\nexport function addQuestion(item) {\r\n    return {\r\n        type: QUESTION,\r\n        item\r\n    }\r\n}\r\n\r\nexport function clearQuiz() {\r\n    return {\r\n        type: CREATE_QUIZ\r\n    }\r\n}\r\n\r\nexport function createQuiz() {\r\n    return async (dispatch, getState) => {\r\n\r\n        await axios.post('https://quiz-316f6.firebaseio.com/quizes.json', getState().allTests.quiz)\r\n        dispatch(clearQuiz())\r\n    }\r\n}  \r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../store/actions/authActions'\r\n\r\nclass Logout extends Component {\r\n    componentDidMount() {\r\n        this.props.logout()\r\n    }\r\n    render() {\r\n        return <Redirect to={'/'}/>\r\n}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        logout: () => dispatch(logout())\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout)\r\n","import React, {Component} from 'react';\nimport Layout from './hoc/Layout/Layout'\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom'\nimport MainQuiz from './containers/MainQuiz'\nimport GuestScreen from './components/UI/GuestScreen/GuestScreen'\nimport Auth from './containers/Auth/Auth'\nimport QuizCreator from './containers/QuizeCreator/QuizCreator'\nimport './App.css';\nimport { connect } from 'react-redux';\nimport Logout from './components/Logout/Logout';\nimport { autoLogin } from './store/actions/authActions'\n\nclass App extends Component {\n  \n  componentDidMount() {\n    this.props.autoLogin()\n  }\n  \n  render(){\n    let routes = (\n      <Switch>\n        <Route path=\"/auth\" component={Auth} />\n        <Route path=\"/quiz/:id\" component={MainQuiz} />\n        <Route path=\"/\" exact component={GuestScreen} />\n        <Redirect to={'/'} />\n      </Switch>\n    )\n  \n    if (this.props.isAuthenticated) {\n      routes = (\n        <Switch>\n          <Route path=\"/create-quize\" component={QuizCreator} />\n          <Route path=\"/quiz/:id\" component={MainQuiz} />\n          <Route path=\"/logout\" component={Logout} />\n          <Route path=\"/\" exact component={GuestScreen} />\n          <Redirect to={'/'} />\n        </Switch>\n      )\n    }\n    return (\n      <div className=\"App\">\n        <Layout>\n          {routes}\n        </Layout>\n      </div>\n    );\n  }\n  \n}\n\nfunction mapStateToProps(state) {\n  return {\n    isAuthenticated: !!state.auth.token\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    autoLogin: () => dispatch(autoLogin())\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n\n\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        \n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n             \n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              \n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    FETCH_QUESTIONARE_TITLES, FETCH_QUESTIONARE_TITLES_ERROR,\r\n    FETCH_TEST_ID,\r\n    FETCH_ACTIVE_QUESTIONARE_TITLE_AND_QUESTIONS,\r\n    RETRY_HANDLER,\r\n    ANSWER,\r\n    IS_QUESTIONNAIRE_FINISHED,\r\n    NEXT_QUESTION,\r\n    REPEAT_HANDLER,\r\n    QUESTION,\r\n    CREATE_QUIZ,\r\n    GUEST_SCREEN_OFF,\r\n    QUIZ_SET_STATE\r\n} from '../actions/actionTypes'\r\n\r\nconst intialState = {\r\n    guestScreen: true,\r\n    allQuestionnaireTitles: ['Тестовый заголовок', 'Тестовый заголовок 2'],\r\n    results: {}, //{[id]: success error}\r\n    testId: null, //||   props.location.pathname.split('/')[2],\r\n    isFinished: false,\r\n    questionsLoad: false,\r\n    activeQuestion: 0,\r\n    answerState: [],// {[answerId: 'success' or 'error']}\r\n    questionnaireTitle: '',\r\n    key: null,\r\n    questions: [],\r\n    quiz: []\r\n}\r\n\r\n\r\nexport default function guestScreenReducer(state = intialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_ACTIVE_QUESTIONARE_TITLE_AND_QUESTIONS: {\r\n            return {\r\n                ...state,\r\n                questionsLoad: true,\r\n                questionnaireTitle: action.questionnaireTitle,\r\n                questions: action.questions\r\n            }\r\n        }\r\n        case ANSWER: {\r\n            return {\r\n                ...state,\r\n                answerState: state.answerState.push(action.answerState),\r\n                results: action.results\r\n            }\r\n        }\r\n        case IS_QUESTIONNAIRE_FINISHED: {\r\n            return {\r\n                ...state,\r\n                isFinished: true,\r\n                answerState: []\r\n            }\r\n        }\r\n        case NEXT_QUESTION: {\r\n            return {\r\n                ...state,\r\n                activeQuestion: action.number,\r\n                answerState: []\r\n            }\r\n        }\r\n        case RETRY_HANDLER: {\r\n            return {\r\n                ...state,\r\n                results: {},\r\n                isFinished: false,\r\n                activeQuestion: 0,\r\n                answerState: []\r\n            }\r\n        }\r\n        case REPEAT_HANDLER: {\r\n            return {\r\n                ...state,\r\n                guestScreen: true,\r\n                isFinished: false,\r\n                activeQuestion: 0,\r\n                answerState: [],\r\n            }\r\n        }\r\n        case GUEST_SCREEN_OFF:\r\n            return {\r\n                ...state,\r\n                guestScreen: true,\r\n                allQuestionnaireTitles: ['Тестовый заголовок', 'Тестовый заголовок 2'],\r\n                results: {}, //{[id]: success error}\r\n                testId: null, //||   props.location.pathname.split('/')[2],\r\n                isFinished: false,\r\n                questionsLoad: false,\r\n                activeQuestion: 0,\r\n                answerState: [],// {[answerId: 'success' or 'error']}\r\n                questionnaireTitle: '',\r\n                key: null,\r\n                questions: [],\r\n                quiz: []\r\n            }\r\n        case FETCH_QUESTIONARE_TITLES:\r\n            return {\r\n                ...state,\r\n                allQuestionnaireTitles: action.allQuestionnaireTitles,\r\n                isFinished: false,\r\n                guestScreen: true,\r\n                testId: null,\r\n                questionnaireTitle: '',\r\n                questions: [],\r\n                questionsLoad: false\r\n            }\r\n        case FETCH_TEST_ID:\r\n            return {\r\n                ...state,\r\n                testId: action.testId,\r\n                guestScreen: false\r\n            }\r\n        case QUIZ_SET_STATE:\r\n            return {\r\n            ...state, answerState: action.answerState, results: action.results\r\n            }\r\n        case QUESTION:\r\n            return {\r\n                ...state,\r\n                quiz: [...state.quiz, action.item]\r\n            }\r\n        case CREATE_QUIZ:\r\n            return {\r\n                ...state,\r\n                quiz: []\r\n            }\r\n        case FETCH_QUESTIONARE_TITLES_ERROR:\r\n        default:\r\n            return state\r\n    }\r\n} ","import {AUTH_SUCCESS, AUTH_LOGOUT} from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    token: null\r\n  }\r\n  \r\n  export default function authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case AUTH_SUCCESS:\r\n        return {\r\n          ...state, token: action.token\r\n        }\r\n      case AUTH_LOGOUT:\r\n        return {\r\n          ...state, token: null\r\n        }\r\n      default:\r\n        return state\r\n    }\r\n    \r\n  }","import { combineReducers } from 'redux'\r\nimport guestScreenReducer from './guestScreenReducer'\r\nimport AuthReducer from './AuthReducer'\r\n\r\nexport default combineReducers({\r\n    allTests: guestScreenReducer,\r\n    auth: AuthReducer\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\nimport { createStore, compose, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './store/reducers/rootReducer'\nimport thunk from 'redux-thunk'\n\nconst composeEnhancers =\n    typeof window === 'object' &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        }) : compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}